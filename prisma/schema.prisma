generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bem {
  id            Int            @unique(map: "bens_id_UNIQUE") @default(autoincrement())
  sala_id       Int
  inventario_id Int
  nome          String         @db.VarChar(200)
  tombo         String?        @db.VarChar(15)
  responsavel   String?        @db.VarChar(80)
  decricao      String         @db.MediumText
  valor         Decimal?       @db.Decimal(10, 2)
  inventario    inventario     @relation(fields: [inventario_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bens_inventarios1")
  sala          sala           @relation(fields: [sala_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bens_salas1")
  levantamento  levantamento[]

  @@id([id, sala_id, inventario_id])
  @@index([inventario_id], map: "fk_bens_inventarios1_idx")
  @@index([sala_id], map: "fk_bens_salas1_idx")
}

model campus {
  id                Int          @id @default(autoincrement())
  nome              String?      @db.VarChar(80)
  telefone          String?      @db.VarChar(13)
  cidade            String?      @db.VarChar(60)
  bairro            String?      @db.VarChar(60)
  rua               String?      @db.VarChar(60)
  numoro_residencia Int?
  inventario        inventario[]
}

model inventario {
  id           Int            @default(autoincrement())
  nome         String         @db.VarChar(80)
  data         DateTime       @db.Date
  concluido    Boolean
  campus_id    Int
  bem          bem[]
  campus       campus         @relation(fields: [campus_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_inventarios_campus1")
  levantamento levantamento[]

  @@id([id, campus_id])
  @@index([campus_id], map: "fk_inventarios_campus1_idx")
}

model levantamento {
  levantamento_id Int        @unique(map: "hist_id_UNIQUE") @default(autoincrement())
  inventario_id   Int
  bem_id          Int
  sala_id         Int
  usuario_id      Int
  imagem          String?    @db.VarChar(200)
  encontrado      Boolean
  ocioso          Boolean
  estado          String     @db.VarChar(30)
  data            DateTime   @db.DateTime(0)
  bem             bem        @relation(fields: [bem_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_levantamento_bens1")
  inventario      inventario @relation(fields: [inventario_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_levantamento_inventarios1")
  sala            sala       @relation(fields: [sala_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_levantamento_salas1")
  usuario         usuario    @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_levantamento_usuarios1")

  @@id([levantamento_id, inventario_id, bem_id, sala_id, usuario_id])
  @@index([bem_id], map: "fk_levantamento_bens1_idx")
  @@index([inventario_id], map: "fk_levantamento_inventarios1_idx")
  @@index([sala_id], map: "fk_levantamento_salas1_idx")
  @@index([usuario_id], map: "fk_levantamento_usuarios1_idx")
}

model sala {
  id           Int            @id @unique(map: "Sala_id_UNIQUE") @default(autoincrement())
  nome         String         @db.VarChar(120)
  bem          bem[]
  levantamento levantamento[]
}

model usuario {
  id           Int            @id @unique(map: "audi_id_UNIQUE") @default(autoincrement())
  nome         String         @db.VarChar(80)
  email        String         @unique(map: "audi_email_UNIQUE") @db.VarChar(80)
  senha        String         @db.VarChar(200)
  funcao       String         @db.VarChar(20)
  status       Boolean
  levantamento levantamento[]
}
